docker pull mcr.microsoft.com/mssql/server:2017-latest

sudo docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=<YourStrong@Passw0rd>" \
   -p 1433:1433 --name cs411proj \
   -d mcr.microsoft.com/mssql/server:2017-latest

sudo docker exec -it cs411proj /opt/mssql-tools/bin/sqlcmd \
   -S localhost -U SA -P "<YourStrong@Passw0rd>" \
   -Q 'ALTER LOGIN SA WITH PASSWORD="CS411proj"'

CREATE DATABASE CS411Proj

CREATE TABLE tweets (
    tweet_id INT IDENTITY(1,1) PRIMARY KEY,
    tweet_date DATETIME,
    district INT,
    first_name CHAR(100),
    last_name CHAR(100),
    likes INT,
    party CHAR(100),
    candidate CHAR(100),
    tweet_text CHAR(560)
);

CREATE TABLE tweets_archive (
    week_start DATE,
    district INT,
    party CHAR(100),
    candidate CHAR(100),
    num_tweets INT,
    total_likes INT,
    most_liked_tweet CHAR(560),
    likes INT,
    first_name CHAR(100),
    last_name CHAR(100),
    PRIMARY KEY (week_start, district, party, candidate)
);

CREATE PROCEDURE keep_only_last_week
AS
    DECLARE @current_time DATETIME = GETDATE();
    DECLARE @cutoff DATE = CAST(CAST(CAST(@current_time AS FLOAT) - 6 AS DATETIME) AS DATE);

    INSERT INTO tweets_archive
    SELECT res.week_start, res.district, res.party, res.candidate, res.num_tweets, res.total_likes, res.tweet_text, res.max_likes, res.first_name, res.last_name
    FROM 
        -- additional subquery needed to filter out the case where two tweets both had max likes, this chooses one of them
        (SELECT
            ROW_NUMBER() OVER(PARTITION BY subq.week_start, subq.district, subq.party, subq.candidate ORDER BY subq.week_start, subq.district, subq.party, subq.candidate) AS row_num,
            subq.week_start, subq.district, subq.party, subq.candidate, subq.num_tweets, subq.total_likes, tweets.tweet_text, subq.max_likes, tweets.first_name, tweets.last_name
        FROM
            (SELECT CAST(DATEADD(wk, DATEDIFF(wk, 6, tweets.tweet_date), 0) AS DATE) as week_start, tweets.district, tweets.party, tweets.candidate, COUNT(*) as num_tweets, SUM(tweets.likes) as total_likes, MAX(tweets.likes) as max_likes
            FROM tweets
            WHERE tweets.tweet_date < @cutoff
            GROUP BY tweets.district, tweets.party, tweets.candidate, CAST(DATEADD(wk, DATEDIFF(wk, 6, tweets.tweet_date), 0) AS DATE)) subq, tweets
        WHERE tweets.district = subq.district
        AND tweets.party = subq.party
        AND tweets.likes = subq.max_likes
        AND tweets.tweet_date < @cutoff) res
    WHERE res.row_num = 1;

    DELETE FROM tweets
    WHERE tweets.tweet_date < @cutoff;
GO

To call it, run:
    EXEC dbo.keep_only_last_week

CREATE TRIGGER merge_incoming_data
ON tweets_archive
INSTEAD OF INSERT
AS

IF (
    (SELECT COUNT(*)
    FROM tweets_archive, inserted
    WHERE tweets_archive.week_start = inserted.week_start
    AND tweets_archive.district = inserted.district
    AND tweets_archive.party = inserted.party
    AND tweets_archive.candidate = inserted.candidate) 
    = 0)
    
    -- all good
    INSERT INTO tweets_archive
    SELECT * FROM inserted;

ELSE 
    -- we need to update some rows
    UPDATE tweets_archive
    SET tweets_archive.num_tweets += inserted.num_tweets, tweets_archive.total_likes += inserted.total_likes
    FROM inserted
    WHERE tweets_archive.week_start = inserted.week_start
    AND tweets_archive.district = inserted.district
    AND tweets_archive.party = inserted.party
    AND tweets_archive.candidate = inserted.candidate;

    UPDATE tweets_archive
    SET tweets_archive.most_liked_tweet = res.most_liked_tweet, tweets_archive.likes = res.likes, tweets_archive.first_name = res.first_name, tweets_archive.last_name = res.last_name
    FROM
        (SELECT inserted.week_start, inserted.district, inserted.party, inserted.candidate, inserted.most_liked_tweet, inserted.likes, inserted.first_name, inserted.last_name
        FROM tweets_archive, inserted
        WHERE tweets_archive.week_start = inserted.week_start
        AND tweets_archive.district = inserted.district
        AND tweets_archive.party = inserted.party
        AND tweets_archive.candidate = inserted.candidate
        AND tweets_archive.likes < inserted.likes) res
    WHERE tweets_archive.week_start = res.week_start
    AND tweets_archive.district = res.district
    and tweets_archive.candidate = res.candidate;


